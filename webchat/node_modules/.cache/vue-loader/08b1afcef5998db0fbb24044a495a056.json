{"remainingRequest":"/Users/r.f.maalman/Projects/Webchat/webchat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/r.f.maalman/Projects/Webchat/webchat/src/components/Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/r.f.maalman/Projects/Webchat/webchat/src/components/Users.vue","mtime":1558967239877},{"path":"/Users/r.f.maalman/Projects/Webchat/webchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/r.f.maalman/Projects/Webchat/webchat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/r.f.maalman/Projects/Webchat/webchat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/r.f.maalman/Projects/Webchat/webchat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport Vue from 'vue';\nimport User from './User';\nimport io from '../socketio';\n\nexport default {\n  name: 'Users',\n  data () {\n    return {\n      total: 1,\n      users: [],\n      images: {}\n    }\n  },\n  components: {\n    User\n  },\n  computed: {\n    totalResults () {\n      return this.users.filter(user => {\n        return this.images[user]\n      }).length;\n    },\n    totalTop () {\n      return 100 / Math.ceil(Math.sqrt(this.totalResults)) + '%';\n    },\n    totalLeft () {\n      return 100 / Math.ceil(Math.sqrt(this.totalResults)) + '%';\n    }\n  },\n  mounted() {\n    let _this = this;\n\n    io.on('init_others', (users) => {\n      _this.users = users;\n      console.log(_this.users);\n    });\n\n    io.on('user_joined', function(data) {\n      _this.users.push(data);\n    });\n\n    io.on('user_disconnected', function(id) {\n      for (let i = 0; i < _this.users.length; i++) {\n        const element = _this.users[i];\n        if(element.user_id == id) {\n          _this.users.splice(i, 1);\n        }\n      }\n    });\n\n    io.on('image', a => {\n      if(!this.images[a.id]) {\n        Vue.set(this.images, a.id, {});\n      }\n\n      Vue.set(this.images[a.id], 'image', a.image);\n    });\n  }\n}\n",{"version":3,"sources":["Users.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Users.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <section class=\"grid\" v-if=\"users.length > 0\">\n      <User v-for=\"user in users\" :width=\"totalTop\" :height=\"totalLeft\" :image=\"images[user.user_id].image\" v-if=\"images[user.user_id]\" :color=\"user.user_data.color\" :name=\"user.user_data.name\">\n        \n      </User>\n    </section>\n  </div>\n</template>\n\n<script>\n\nimport Vue from 'vue';\nimport User from './User';\nimport io from '../socketio';\n\nexport default {\n  name: 'Users',\n  data () {\n    return {\n      total: 1,\n      users: [],\n      images: {}\n    }\n  },\n  components: {\n    User\n  },\n  computed: {\n    totalResults () {\n      return this.users.filter(user => {\n        return this.images[user]\n      }).length;\n    },\n    totalTop () {\n      return 100 / Math.ceil(Math.sqrt(this.totalResults)) + '%';\n    },\n    totalLeft () {\n      return 100 / Math.ceil(Math.sqrt(this.totalResults)) + '%';\n    }\n  },\n  mounted() {\n    let _this = this;\n\n    io.on('init_others', (users) => {\n      _this.users = users;\n      console.log(_this.users);\n    });\n\n    io.on('user_joined', function(data) {\n      _this.users.push(data);\n    });\n\n    io.on('user_disconnected', function(id) {\n      for (let i = 0; i < _this.users.length; i++) {\n        const element = _this.users[i];\n        if(element.user_id == id) {\n          _this.users.splice(i, 1);\n        }\n      }\n    });\n\n    io.on('image', a => {\n      if(!this.images[a.id]) {\n        Vue.set(this.images, a.id, {});\n      }\n\n      Vue.set(this.images[a.id], 'image', a.image);\n    });\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n*[class^=\"grid\"] {\n  display: flex;\n  flex-wrap: wrap;\n  height: 100vh;\n  flex-wrap: wrap;\n  width: 100%;\n  /* grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: repeat(12, 1fr);\n  align-items: flex-start; */\n}\n.grid-1 > * {\n  height: 100%;\n  width: 100%;\n}\n\n.grid-2 > * {\n  height: 100%;\n  width: 50%;\n}\n\n.grid-3 > *,\n.grid-4 > * {\n  height: 50%;\n  width: 50%;\n}\n\n.grid-5,\n.grid-6 {\n  height: 50%;\n  width: 33.3333%;\n} \n\n\n\n</style>\n"]}]}